// <auto-generated />
using System;
using DataAccessLayer.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220521114503_Identity")]
    partial class Identity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EntityLayer.Concrete.Aidat", b =>
                {
                    b.Property<int>("AidatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AidatKullanıcıId")
                        .HasColumnType("int");

                    b.Property<bool>("AidatOdendiMi")
                        .HasColumnType("bit");

                    b.Property<DateTime>("AidatSonOdemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AidatTarihi")
                        .HasColumnType("datetime2");

                    b.Property<double>("AidatUcreti")
                        .HasColumnType("float");

                    b.HasKey("AidatId");

                    b.HasIndex("AidatKullanıcıId");

                    b.ToTable("Aidatlar");
                });

            modelBuilder.Entity("EntityLayer.Concrete.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("EntityLayer.Concrete.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NameSurname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Daire", b =>
                {
                    b.Property<int>("DaireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DaireBlok")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DaireDurumu")
                        .HasColumnType("bit");

                    b.Property<string>("DaireKatı")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DaireKiradaMı")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DaireKullanıcıId")
                        .HasColumnType("int");

                    b.Property<int>("DaireNo")
                        .HasColumnType("int");

                    b.Property<string>("DaireTipi")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DaireId");

                    b.HasIndex("DaireKullanıcıId");

                    b.ToTable("Daireler");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Fatura", b =>
                {
                    b.Property<int>("FaturaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FaturaKullanıcıId")
                        .HasColumnType("int");

                    b.Property<bool>("FaturaOdendiMi")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FaturaSonOdemeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FaturaTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("FaturaTipi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FaturaTutarı")
                        .HasColumnType("float");

                    b.HasKey("FaturaId");

                    b.HasIndex("FaturaKullanıcıId");

                    b.ToTable("Faturalar");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Iletisim", b =>
                {
                    b.Property<int>("IletisimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IletisimEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IletisimIsım")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IletisimKonu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IletisimMesaj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IletisimSoyisim")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IletisimId");

                    b.ToTable("Iletisim");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Kullanıcı", b =>
                {
                    b.Property<int>("KullanıcıId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KullanıcıAraçBilgisi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KullanıcıDaireNo")
                        .HasColumnType("int");

                    b.Property<string>("KullanıcıEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KullanıcıIsım")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KullanıcıSifre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KullanıcıSoyisim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KullanıcıTCNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KullanıcıTelefonNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KullanıcıId");

                    b.ToTable("Kullanıcılar");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Mesaj", b =>
                {
                    b.Property<int>("MesajId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MesajAlanId")
                        .HasColumnType("int");

                    b.Property<string>("MesajIcerik")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MesajKonusu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MesajOkunduMu")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MesajTarihi")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MesajYollayanId")
                        .HasColumnType("int");

                    b.HasKey("MesajId");

                    b.HasIndex("MesajAlanId");

                    b.HasIndex("MesajYollayanId");

                    b.ToTable("Mesajlar");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Yonetici", b =>
                {
                    b.Property<int>("YoneticiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("YoneticiEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YoneticiIsım")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YoneticiSifre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YoneticiSoyisim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YoneticiTelefonNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("YoneticiId");

                    b.ToTable("Yoneticiler");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Aidat", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Kullanıcı", "AidatKullanıcı")
                        .WithMany("KullanıcıAidatlar")
                        .HasForeignKey("AidatKullanıcıId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AidatKullanıcı");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Daire", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Kullanıcı", "DaireKullanıcı")
                        .WithMany()
                        .HasForeignKey("DaireKullanıcıId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DaireKullanıcı");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Fatura", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Kullanıcı", "FaturaKullanıcı")
                        .WithMany("KullanıcıFaturalar")
                        .HasForeignKey("FaturaKullanıcıId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FaturaKullanıcı");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Mesaj", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Yonetici", "MesajAlan")
                        .WithMany("YoneticiMesajAl")
                        .HasForeignKey("MesajAlanId");

                    b.HasOne("EntityLayer.Concrete.Kullanıcı", "MesajYollayan")
                        .WithMany("KullanıcıMesajGönder")
                        .HasForeignKey("MesajYollayanId");

                    b.Navigation("MesajAlan");

                    b.Navigation("MesajYollayan");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("EntityLayer.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityLayer.Concrete.Kullanıcı", b =>
                {
                    b.Navigation("KullanıcıAidatlar");

                    b.Navigation("KullanıcıFaturalar");

                    b.Navigation("KullanıcıMesajGönder");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Yonetici", b =>
                {
                    b.Navigation("YoneticiMesajAl");
                });
#pragma warning restore 612, 618
        }
    }
}
